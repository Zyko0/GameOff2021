#version 300 es

#if defined(GL_ES)
precision highp float;
#else
#define lowp
#define mediump
#define highp
#endif

uniform vec2 U0;
uniform vec2 U1[4];
uniform vec2 U2;
uniform vec2 U3;
uniform vec2 U4[3];
uniform vec2 U5;
uniform vec2 U6;
uniform vec2 U7;
uniform vec3 U8;
uniform float U9;
uniform float U10;
uniform vec3 U11[32];
uniform vec2 U12[32];
uniform vec4 U13[4];
uniform vec4 U14[4];
uniform vec4 U15[4];
uniform vec4 U16[4];
uniform sampler2D T0;
uniform sampler2D T1;
uniform sampler2D T2;
uniform sampler2D T3;
in vec2 V0;
in vec4 V1;
out vec4 fragColor;

void F0(in vec2 l0, out float l1);
void F1(in vec2 l0, out float l1);
void F2(in float l0, in vec4 l1, in vec4 l2, in vec4 l3, in vec4 l4, out vec3 l5);
void F3(in vec3 l0, in float l1, in float l2, out vec3 l3);
void F4(in vec3 l0, in vec3 l1, out vec3 l2);
void F5(in vec3 l0, in float l1, in vec3 l2, in float l3, out vec4 l4);
void F7(in vec3 l0, in vec3 l1, in vec3 l2, in float l3, out vec4 l4);
void F8(in vec3 l0, in vec3 l1, in float l2, in float l3, out vec4 l4);
void F9(in vec4 l0, in vec4 l1, out vec4 l2);
void F10(in vec3 l0, out vec4 l1);
void F11(in vec3 l0, in vec3 l1, in float l2, in float l3, out vec4 l4);
void F12(in vec3 l0, out vec3 l1);
void F13(in vec3 l0, in vec3 l1, in vec3 l2, in vec3 l3, out vec3 l4);
void F14(in vec3 l0, in vec3 l1, in float l2, in float l3, out float l4);

void F0(in vec2 l0, out float l1) {
	l1 = fract((sin(dot(l0, vec2(1.2989800000e+01, 4.1414000000e+00)))) * (4.3758545300e+04));
	return;
}

void F1(in vec2 l0, out float l1) {
	vec2 l2 = vec2(0);
	vec2 l3 = vec2(0);
	float l4 = float(0);
	float l5 = float(0);
	float l6 = float(0);
	float l7 = float(0);
	float l8 = float(0);
	l2 = floor(l0);
	l3 = fract(l0);
	l3 = ((l3) * (l3)) * ((3.0) - ((2.0) * (l3)));
	F0(l2, l4);
	F0((l2) + (vec2(1.0, 0.0)), l5);
	F0((l2) + (vec2(0.0, 1.0)), l6);
	F0((l2) + (vec2(1.0, 1.0)), l7);
	l8 = mix(mix(l4, l5, (l3).x), mix(l6, l7, (l3).x), (l3).y);
	l1 = (l8) * (l8);
	return;
}

void F2(in float l0, in vec4 l1, in vec4 l2, in vec4 l3, in vec4 l4, out vec3 l5) {
	vec3 l6 = vec3(0);
	if (((l0) >= ((l1).a)) && ((l0) <= ((l2).a))) {
		l6 = mix(((l1).rgb) * ((l1).rgb), ((l2).rgb) * ((l2).rgb), vec3(((l0) - ((l1).a)) / (((l2).a) - ((l1).a))));
	} else {
		if (((l0) >= ((l2).a)) && ((l0) <= ((l3).a))) {
			l6 = mix(((l2).rgb) * ((l2).rgb), ((l3).rgb) * ((l3).rgb), vec3(((l0) - ((l2).a)) / (((l3).a) - ((l2).a))));
		} else {
			l6 = mix(((l3).rgb) * ((l3).rgb), ((l4).rgb) * ((l4).rgb), vec3(((l0) - ((l3).a)) / (((l4).a) - ((l3).a))));
		}
	}
	l6 = ((l6) * (l6)) * ((3.0) - ((2.0) * (l6)));
	l5 = sqrt(l6);
	return;
}

void F3(in vec3 l0, in float l1, in float l2, out vec3 l3) {
	float l4 = float(0);
	vec4 l5[4];
	l5[0] = vec4(0);
	l5[1] = vec4(0);
	l5[2] = vec4(0);
	l5[3] = vec4(0);
	vec3 l6 = vec3(0);
	F1(((l0).xy) * (8.0), l4);
	l1 = l4;
	if ((l2) == (0.0)) {
		l5[0] = U13[0];
		l5[1] = U13[1];
		l5[2] = U13[2];
		l5[3] = U13[3];
	} else {
		if ((l2) == (1.0)) {
			l5[0] = U14[0];
			l5[1] = U14[1];
			l5[2] = U14[2];
			l5[3] = U14[3];
		} else {
			if ((l2) == (2.0)) {
				l5[0] = U15[0];
				l5[1] = U15[1];
				l5[2] = U15[2];
				l5[3] = U15[3];
			} else {
				if ((l2) == (3.0)) {
					l5[0] = U16[0];
					l5[1] = U16[1];
					l5[2] = U16[2];
					l5[3] = U16[3];
				}
			}
		}
	}
	F2(l1, (l5)[0], (l5)[1], (l5)[2], (l5)[3], l6);
	l3 = l6;
	return;
}

void F4(in vec3 l0, in vec3 l1, out vec3 l2) {
	l2 = (l0) - (l1);
	return;
}

void F5(in vec3 l0, in float l1, in vec3 l2, in float l3, out vec4 l4) {
	vec3 l5 = vec3(0);
	float l6 = float(0);
	vec3 l7 = vec3(0);
	F4(l0, l2, l5);
	l0 = l5;
	l6 = (length(l0)) - (l1);
	F3(l0, -(l6), l3, l7);
	l4 = vec4(l6, l7);
	return;
}

void F7(in vec3 l0, in vec3 l1, in vec3 l2, in float l3, out vec4 l4) {
	vec3 l5 = vec3(0);
	float l6 = float(0);
	vec3 l7 = vec3(0);
	l5 = (abs((l0) - (l2))) - (l1);
	l6 = (length(max(l5, 0.0))) + (min(max((l5).x, max((l5).y, (l5).z)), 0.0));
	F3(l0, -(l6), l3, l7);
	l4 = vec4(l6, l7);
	return;
}

void F8(in vec3 l0, in vec3 l1, in float l2, in float l3, out vec4 l4) {
	float l5 = float(0);
	l5 = (dot(l0, l1)) + (l2);
	l4 = vec4(l5, vec3(1.0, 0.0, 0.0));
	return;
}

void F9(in vec4 l0, in vec4 l1, out vec4 l2) {
	if (((l1).x) < ((l0).x)) {
		l2 = l1;
		return;
	}
	l2 = l0;
	return;
}

void F10(in vec3 l0, out vec4 l1) {
	vec4 l2 = vec4(0);
	vec4 l3 = vec4(0);
	float l4 = float(0);
	float l5 = float(0);
	float l6 = float(0);
	vec3 l7 = vec3(0);
	vec4 l8 = vec4(0);
	vec4 l9 = vec4(0);
	vec3 l10 = vec3(0);
	vec3 l11 = vec3(0);
	vec4 l12 = vec4(0);
	vec4 l13 = vec4(0);
	vec4 l14 = vec4(0);
	vec4 l15 = vec4(0);
	F8(l0, normalize(vec3(0.0, -1.0, 0.0)), 1.0, 3.0, l2);
	l3 = l2;
	l4 = 100.0;
	l5 = 3.5000000000e-01;
	l6 = 1.0;
	l7 = vec3(0.0, ((1.0) + (l5)) - (1.0000000000e-03), -1.0);
	F7(l0, vec3(l6, l5, l4), l7, 2.0, l8);
	l9 = l8;
	l10 = vec3(0.0, 1.0, 0.0);
	F4(l10, U8, l11);
	l10 = l11;
	F5(l0, U9, l10, 0.0, l12);
	l13 = l12;
	F9(l9, l13, l14);
	F9(l3, l14, l15);
	l3 = l15;
	for (float l16 = 0.0; l16 < 32.0; l16++) {
		vec2 l17 = vec2(0);
		vec3 l18 = vec3(0);
		vec3 l19 = vec3(0);
		vec4 l20 = vec4(0);
		vec4 l21 = vec4(0);
		vec4 l22 = vec4(0);
		if ((l16) >= (U10)) {
			break;
		}
		l17 = (U12)[l16];
		l18 = vec3(0.0, 1.0, 0.0);
		F4(l18, (U11)[l16], l19);
		l18 = l19;
		F7(l0, vec3((l17).x, (l17).y, (l17).x), l18, 1.0, l20);
		l21 = l20;
		F9(l3, l21, l22);
		l3 = l22;
	}
	l1 = l3;
	return;
}

void F11(in vec3 l0, in vec3 l1, in float l2, in float l3, out vec4 l4) {
	float l5 = float(0);
	vec4 l6 = vec4(0);
	l5 = l2;
	l6 = vec4(0.0);
	for (int l7 = 0; l7 < 128; l7++) {
		vec3 l8 = vec3(0);
		vec4 l9 = vec4(0);
		l8 = (l0) + ((l5) * (l1));
		F10(l8, l9);
		l6 = l9;
		l5 = (l5) + ((l6).x);
		if ((((l6).x) < (1.0000000000e-03)) || ((l5) > (l3))) {
			break;
		}
	}
	l4 = vec4(l5, (l6).yzw);
	return;
}

void F12(in vec3 l0, out vec3 l1) {
	vec2 l2 = vec2(0);
	vec4 l3 = vec4(0);
	vec4 l4 = vec4(0);
	vec4 l5 = vec4(0);
	vec4 l6 = vec4(0);
	l2 = (vec2(1.0, -1.0)) * (5.0000000000e-04);
	F10((l0) + ((l2).xyy), l3);
	F10((l0) + ((l2).yyx), l4);
	F10((l0) + ((l2).yxy), l5);
	F10((l0) + ((l2).xxx), l6);
	l1 = normalize((((((l2).xyy) * ((l3).x)) + (((l2).yyx) * ((l4).x))) + (((l2).yxy) * ((l5).x))) + (((l2).xxx) * ((l6).x)));
	return;
}

void F13(in vec3 l0, in vec3 l1, in vec3 l2, in vec3 l3, out vec3 l4) {
	vec3 l5 = vec3(0);
	float l6 = float(0);
	vec3 l7 = vec3(0);
	float l8 = float(0);
	vec3 l9 = vec3(0);
	l5 = vec3(2.0000000000e-01);
	l6 = clamp(dot(l0, l1), 0.0, 1.0);
	l7 = (l3) * (l6);
	l8 = clamp(dot(reflect(l0, l1), -(l2)), 0.0, 1.0);
	l9 = (vec3(0.0, 0.0, 2.0000000000e-01)) * (pow(l8, 1.0));
	l4 = ((l5) + (l7)) + (l9);
	return;
}

void F14(in vec3 l0, in vec3 l1, in float l2, in float l3, out float l4) {
	float l5 = float(0);
	float l6 = float(0);
	l5 = 1.0;
	l6 = l2;
	for (float l7 = 0.0; l7 < 16.0; l7++) {
		vec4 l8 = vec4(0);
		float l9 = float(0);
		F10((l0) + ((l1) * (l6)), l8);
		l9 = (l8).x;
		l5 = min(l5, ((8.0) * (l9)) / (l6));
		l6 = (l6) + (clamp(l9, 2.0000000000e-02, 1.0000000000e-01));
		if (((l9) < (1.0000000000e-03)) || ((l6) > (l3))) {
			break;
		}
	}
	l4 = clamp(l5, 0.0, 1.0);
	return;
}

void main(void) {
	vec3 l0 = vec3(0);
	vec2 l1 = vec2(0);
	vec3 l2 = vec3(0);
	vec3 l3 = vec3(0);
	vec4 l4 = vec4(0);
	vec4 l5 = vec4(0);
	float l6 = float(0);
	vec3 l7 = vec3(0);
	l0 = vec3(1.0000000000e-01, 1.0000000000e-01, 1.0000000000e-01);
	l1 = ((((gl_FragCoord).xy) / (U7)) * (2.0)) - (1.0);
	l2 = vec3(0.0, 0.0, -1.2500000000e+00);
	l3 = normalize(vec3(l1, -1.0));
	F11(l2, l3, 0.0, 50.0, l4);
	l5 = l4;
	l6 = (l5).x;
	l7 = (l5).yzw;
	if ((l6) > (50.0)) {
		l7 = l0;
	} else {
		vec3 l8 = vec3(0);
		vec3 l9 = vec3(0);
		vec3 l10 = vec3(0);
		vec3 l11 = vec3(0);
		vec3 l12 = vec3(0);
		float l13 = float(0);
		float l14 = float(0);
		float l15 = float(0);
		vec3 l16 = vec3(0);
		l8 = (l2) + ((l3) * (l6));
		F12(l8, l9);
		l10 = l9;
		l11 = (l2) - (vec3(0.0, 16.0, -32.0));
		l12 = normalize((l11) - (l8));
		l13 = 1.0;
		F14(l8, l12, 2.0000000000e-02, 2.5000000000e+00, l14);
		l15 = clamp(l14, 1.0000000000e-01, 1.0);
		F13(l12, l10, l3, l7, l16);
		l7 = (l13) * (l16);
		l7 = (l7) * (l15);
	}
	l7 = mix(l7, l0, (1.0) - (exp((((-2.0000000000e-04) * (l6)) * (l6)) * (l6))));
	fragColor = vec4(l7, 1.0);
	return;
}